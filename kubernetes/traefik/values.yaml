# additionalArguments:
# Configure your CertificateResolver here...
# 
# HTTP Challenge
# ---
# Generic Example:
#   - --certificatesresolvers.generic.acme.email=your-email@example.com
#   - --certificatesresolvers.generic.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
#   - --certificatesresolvers.generic.acme.httpChallenge.entryPoint=web
#   - --certificatesresolvers.generic.acme.storage=/ssl-certs/acme-generic.json
#
# Prod / Staging Example:
#   - --certificatesresolvers.staging.acme.email=your-email@example.com
#   - --certificatesresolvers.staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
#   - --certificatesresolvers.staging.acme.httpChallenge.entryPoint=web
#   - --certificatesresolvers.staging.acme.storage=/ssl-certs/acme-staging.json
#   - --certificatesresolvers.production.acme.email=your-email@example.com
#   - --certificatesresolvers.production.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
#   - --certificatesresolvers.production.acme.httpChallenge.entryPoint=web
#   - --certificatesresolvers.production.acme.storage=/ssl-certs/acme-production.json
#
# DNS Challenge
# ---
# Cloudflare Example:
#  - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
#  - --certificatesresolvers.cloudflare.acme.email=your-email@example.com
#  - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1
#  - --certificatesresolvers.cloudflare.acme.storage=/ssl-certs/acme-cloudflare.json
#
# dynu (replace with your DNS provider):
#  - --certificatesresolvers.dynu.acme.dnschallenge.provider=dynu
#  - --certificatesresolvers.dynu.acme.email=hoangndst@gmail.com
#  - --certificatesresolvers.dynu.acme.dnschallenge.resolvers=1.1.1.1
#  - --certificatesresolvers.dynu.acme.storage=/ssl-certs/acme-dynu.json

logs:
# Configure log settings here...
  general:
    level: INFO
    format: json


metrics:
  ## Prometheus is enabled by default.
  ## It can be disabled by setting "prometheus: null"
  prometheus:
    ## Entry point used to expose metrics.
    entryPoint: metrics
    ## Enable metrics on entry points. Default=true
    # addEntryPointsLabels: false
    ## Enable metrics on routers. Default=false
    # addRoutersLabels: true
    ## Enable metrics on services. Default=true
    # addServicesLabels: false
    ## Buckets for latency metrics. Default="0.1,0.3,1.2,5.0"
    # buckets: "0.5,1.0,2.5"
    ## When manualRouting is true, it disables the default internal router in
    ## order to allow creating a custom router for prometheus@internal service.
    # manualRouting: true

ports:
# Configure your entrypoints here...
  web:
    address: :80
    redirectTo: websecure
  websecure:
    address: :443
    tls:
      enabled: true
      certResolver: production
  metrics:
    # When using hostNetwork, use another port to avoid conflict with node exporter:
    # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
    port: 9100
    # hostPort: 9100
    # Defines whether the port is exposed if service.type is LoadBalancer or
    # NodePort.
    #
    # You may not want to expose the metrics port on production deployments.
    # If you want to access it from outside of your cluster,
    # use `kubectl port-forward` or create a secure ingress
    expose: false
    # The exposed port for this service
    exposedPort: 9100
    # The port protocol (TCP/UDP)
    protocol: TCP
  
certificatesResolvers:
  production:
    acme:
      email: hoangndst@gmail.com
      storage: /ssl-certs/acme.json
      dnsChallenge:
        provider: dynu
        resolvers:
          - "1.1.1.1:53"
          - "8.8.8.8:53"

env:
  - name: DYNU_API_KEY
    valueFrom:
      secretKeyRef:
        name: dynu-api-key
        key: api-key

# Disable Dashboard
ingressRoute:
  dashboard:
    enabled: false

# Persistent Storage
persistence:
  enabled: true
  name: ssl-certs
  accessMode: ReadWriteOnce
  size: 1Gi
  path: /ssl-certs
  storageClass: "local-storage" 
  annotations: {}

deployment:
  enabled: true
  # Can be either Deployment or DaemonSet
  kind: Deployment
  # Number of pods of the deployment (only applies when kind == Deployment)
  replicas: 1
  # Number of old history to retain to allow rollback (If not set, default Kubernetes value is set to 10)
  # revisionHistoryLimit: 1
  # Amount of time (in seconds) before Kubernetes will send the SIGKILL signal if Traefik does not shut down
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - worker1
  terminationGracePeriodSeconds: 60
  # The minimum number of seconds Traefik needs to be up and running before the DaemonSet/Deployment controller considers it available
  minReadySeconds: 0
  # Additional deployment annotations (e.g. for jaeger-operator sidecar injection)
  annotations: {}
  # Additional deployment labels (e.g. for filtering deployment by custom labels)
  labels: {}
  # Additional pod annotations (e.g. for mesh injection or prometheus scraping)
  podAnnotations: {}
  # Additional Pod labels (e.g. for filtering Pod by custom labels)
  podLabels: {}
  # Additional containers (e.g. for metric offloading sidecars)
  additionalContainers: []
    # https://docs.datadoghq.com/developers/dogstatsd/unix_socket/?tab=host
    # - name: socat-proxy
    # image: alpine/socat:1.0.5
    # args: ["-s", "-u", "udp-recv:8125", "unix-sendto:/socket/socket"]
    # volumeMounts:
    #   - name: dsdsocket
    #     mountPath: /socket
  # Additional volumes available for use with initContainers and additionalContainers
  additionalVolumes: []
    # - name: dsdsocket
    #   hostPath:
    #     path: /var/run/statsd-exporter
  # Additional initContainers (e.g. for setting file permission as shown below)
  initContainers:
    # The "volume-permissions" init container is required if you run into permission issues.
    # Related issue: https://github.com/traefik/traefik-helm-chart/issues/396
    - name: volume-permissions
      image: busybox:latest
      command: ["sh", "-c", "touch /ssl-certs/acme.json; chmod -Rv 600 /ssl-certs/*"]
      securityContext:
        runAsNonRoot: true
        runAsGroup: 65532
        runAsUser: 65532
      volumeMounts:
        - name: ssl-certs
          mountPath: /ssl-certs
    # - name: volume-permissions
    #   image: busybox:latest
    #   command: ["sh", "-c", "touch /data/acme.json; chmod -v 600 /data/acme.json"]
    #   securityContext:
    #     runAsNonRoot: true
    #     runAsGroup: 65532
    #     runAsUser: 65532
    #   volumeMounts:
    #     - name: data
    #       mountPath: /data
  # Use process namespace sharing
  shareProcessNamespace: false
  # Custom pod DNS policy. Apply if `hostNetwork: true`
  # dnsPolicy: ClusterFirstWithHostNet
  dnsConfig: {}
    # nameservers:
    #   - 192.0.2.1 # this is an example
    # searches:
    #   - ns1.svc.cluster-domain.example
    #   - my.dns.search.suffix
    # options:
    #   - name: ndots
    #     value: "2"
    #   - name: edns0
  # Additional imagePullSecrets
  imagePullSecrets: []
    # - name: myRegistryKeySecretName
  # Pod lifecycle actions
  lifecycle: {}
    # preStop:
    #   exec:
    #     command: ["/bin/sh", "-c", "sleep 40"]
    # postStart:
    #   httpGet:
    #     path: /ping
    #     port: 9000
    #     host: localhost
    #     scheme: HTTP

ingressClass:
  enabled: true
  isDefaultClass: true
